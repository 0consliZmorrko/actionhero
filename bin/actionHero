#!/usr/bin/env node

var binary = {};

binary.fs = require('fs');
binary.path = require('path');
binary.async = require('async');
binary.spawn = require('child_process').spawn
binary.fork = require('child_process').fork

binary.useColors = true;

///////////////
// utilities //
///////////////

binary.utils = {};

binary.log = function(message, styles){
  if(binary.argv['silent'] != 'true'){
    if(binary.useColors == true){
      if (styles == null){styles = ["white"];}
      if (typeof styles == "string"){styles = [styles];}
      for(var i in styles){
        if(binary.consoleColors[styles[i]] != null){
          message = binary.consoleColors[styles[i]](message);
        }
      }
    }else{
      // TODO: strip ansi color codes
      // message = message.replace(new RegExp('\033\\[91m', 'g'), '')
    }
    var time_string = binary.consoleColors.grey(binary.utils.sqlDateTime() + " | ");
    console.log(time_string + message);
  }
}

binary.hardError = function(err){
  binary.log(err, ['red', 'bold']);
  process.exit(1);
}

binary.utils.stringifyInputList = function(list){
  var s = "";
  if(list == null){ return s; }
  arr = list.split(",");
  var used = 0;
  for(var i in arr){
    if(used > 0){ s+= ", ";}
    if(arr[i].length > 0){
      s += '"' + arr[i] + '"';
      used++;
    }
  }
  return s;
}

binary.utils.dir_exists = function(dir){
  try{
    var stats = binary.fs.lstatSync(dir);
    if(stats.isDirectory() || stats.isSymbolicLink()){
      return true;
    }else{
      return false;
    }
  }catch(e){
    return false;
  }
}

binary.utils.file_exists = function(file){
  try{
    var stats = binary.fs.lstatSync(file);
    if(stats.isFile() || stats.isSymbolicLink()){
      return true;
    }else{
      return false;
    }
  }catch(e){
    return false;
  }
}

binary.utils.create_dir_safely = function(dir){
  if(binary.utils.dir_exists(dir)){
    binary.log(" - directory `"+binary.path.normalize(dir)+"` already exists, skipping", "yellow");
  }else{
    binary.log(" - creating directory `"+binary.path.normalize(dir)+"`", "green");
    binary.fs.mkdirSync(dir , 0766);
  }
}

binary.utils.create_file_safely = function(file, data){
  if(binary.utils.file_exists(file)){
    binary.log(" - file `"+binary.path.normalize(file)+"` already exists, skipping", "yellow");
  }else{
    binary.log(" - wrote file `"+binary.path.normalize(file)+"`", "green");
    binary.fs.writeFileSync(file, data);
  }
}

//////////
// Load //
//////////

binary.paths = {
  project_root: process.cwd(),
  actionHero_root: null,
}

if(binary.utils.file_exists(__dirname + "/../actionHero.js")){
  // in the actionHero project itself
  binary.paths.actionHero_root = __dirname + "/..";
}else if(binary.utils.file_exists(__dirname + "/../node_modules/actionHero/actionHero.js")){
  // running from a project's node_modules (bin or actionHero)
  binary.paths.actionHero_root = __dirname + "/../node_modules/actionHero";
}else{
  // installed globally
  binary.paths.actionHero_root = binary.path.normalize(__dirname + "/..");
}

binary.consoleColors = require(binary.paths.actionHero_root + '/node_modules/colors/');
binary.argv = require(binary.paths.actionHero_root + '/node_modules/optimist/').argv;
var loadedUtils = require(binary.paths.actionHero_root + '/helpers/utils.js').utils;
for(var i in loadedUtils){ binary.utils[i] = loadedUtils[i]; }

binary.actions = {};

binary.fs.readdirSync(binary.paths.actionHero_root + "/bin/include/").sort().forEach(function(file){
  if(file.indexOf(".js") > 0){
    var action = file.split(".")[0];
    binary.actions[action] = require(binary.paths.actionHero_root + "/bin/include/" + file)[action];
  }
});

binary.mainAction = binary.argv["_"][0];
if(binary.mainAction == null){ binary.mainAction = "help"; }

binary.log("actionHero >> " + binary.mainAction);
binary.log("project_root >> " + binary.path.normalize(binary.paths.project_root + "/"))
binary.log("actionHero_root >> " + binary.path.normalize(binary.paths.actionHero_root + "/"))

if(binary.actions[binary.mainAction] != null){
  if(binary.argv['daemon'] != null){
    var args = process.argv.splice(2);
    for(var i in args){
      if(args[i].indexOf("--daemon") >= 0){
        args.splice(i,1);
      }
    }
    args.push('--silent=true')
    var command = binary.path.normalize(binary.paths.actionHero_root + "/bin/actionHero");
    var child = binary.fork(command, args, {silent: true, detached: true});
    process.nextTick(function(){
      binary.log("spawned child process with pid "+ child.pid);
      process.exit(0);
    });
  }else{
    binary.actions[binary.mainAction](binary, function(){});
  }
}else{
  binary.actions['unknownInput'](binary, function(){});
  process.exit(1);
}
